# pyproject.toml
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/foo.py  # exclude a file named foo.py in the root of the project
'''

[tool.ruff]
# Enable all rules by default
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstring
    "UP",  # pyupgrade
    "ANN", # flake8-annotations (type hints)
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "T",   # flake8-print
    "Q",   # flake8-quotes
    "RUF", # Ruff-specific rules
    "PLC", # pylint-convention
    "PLE", # pylint-error
    "PLR", # pylint-refactor
    "PLW", # pylint-warning
]

# Ignorar reglas específicas
ignore = [
    "D100",  # Missing docstring in public module
]

# Never try to fix `F401` (unused imports)
unfixable = ["F401"]

# Excluir carpetas y archivos
extend-exclude = [
    "*/migrations/*",    # Excluir todas las carpetas de migraciones
    "__pycache__",
    ".git",
    ".ruff_cache",
    "__init__.py",
]

# Igual que Black
line-length = 88
indent-width = 4

# Python 3.12
target-version = "py312"

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["app", "accounts"]

[tool.ruff.lint]
# Use Google-style docstrings.
pydocstyle = {convention = "google"}

# Reglas habilitadas
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstring
    "UP",  # pyupgrade
    "ANN", # flake8-annotations (type hints)
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "T",   # flake8-print
    "Q",   # flake8-quotes
    "RUF", # Ruff-specific rules
    "PLC", # pylint-convention
    "PLE", # pylint-error
    "PLR", # pylint-refactor
    "PLW", # pylint-warning
]

# Reglas ignoradas
ignore = [
    "D100",  # Missing docstring in public module
    "PLC0414", # Useless import alias - permitimos alias aunque el nombre sea similar
]

unfixable = ["F401"]  # Never try to fix unused imports

[tool.ruff.lint.isort]
# Configuración de organización de imports
force-single-line = true  # Forzar una importación por línea
required-imports = ["from __future__ import annotations"]  # Imports requeridos
combine-as-imports = false  # No combinar imports con as
force-wrap-aliases = true  # Forzar wrap de aliases

# Definir patrones permitidos y prohibidos para importaciones
[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["F401", "D100"]  # Permitir imports no usados en __init__.py

[tool.ruff.lint.per-file-ignores]
"utils/logger.py" = ["T201"]  # Permitir print() en el logger
# Ignore specific rules for test files
"tests/*" = ["D", "ANN"]
# Ignore specific rules for migration files
"*/migrations/*" = ["D", "ANN"]
# Ignore specific rules for settings files
"app/settings.py" = ["D", "ANN"]
# Ignore specific rules for URL configuration files
"*/urls.py" = ["D"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = false
suppress-none-returning = true
suppress-dummy-args = true

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
strict_optional = false
warn_return_any = false
warn_unused_ignores = false
warn_redundant_casts = false
warn_unused_configs = false
